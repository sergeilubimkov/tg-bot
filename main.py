import telebot
import os
from dotenv import load_dotenv
from telebot import types
import webbrowser
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import date
import insert_into_DB
import forDB
from unicodedata import category

load_dotenv()
forDB.init_db()

TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

users_data = {}

@bot.message_handler(commands = ['start'])
def start(message):

    if not insert_into_DB.check_users(message.from_user.id):
        insert_into_DB.add_user(message.from_user.id)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! üëã \n–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª –í–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤')
    else:
        bot.send_message(message.from_user.id, '–° –≤–æ–∑—Ä–∞—â–µ–Ω–∏–µ–º! \n–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏–≤–æ–≤–∞–Ω—ã')

@bot.message_handler(commands = ['hello'])
def main(message):
    bot.send_message(message.chat.id, f'Hello! {message.from_user.first_name} {message.from_user.last_name}')

@bot.message_handler(commands = ['help'])
def main(message):
    bot.send_message(message.chat.id, '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.')

@bot.message_handler(commands = ['site', 'website'])
def site(message):
    webbrowser.open('https://github.com/sergeilubimkov/tg-bot')

@bot.message_handler(commands = ['add'])
def site(message):
    args = message.text.split()[1:]

    if len(args) < 2:
        bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∏ –≤–∏–¥–∞:\n/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        return

    try:
        amount = float(args[0])
    except ValueError:
        bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –í—ã –æ—à–∏–±–ª–∏—Å—å\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∏ –≤–∏–¥–∞:\n/add —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
        return

    category = ' '.join(args[1:])
    insert_into_DB.add_expenses(message.from_user.id, amount, category)
    bot.send_message(message.from_user.id, f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} —Ä—É–± –Ω–∞ {category}')

def send_expenses_report(message, expenses, total, title, empty_text):
    if not expenses:
        bot.send_message(message.from_user.id, empty_text)
        return

    lines = ""
    for amount, category in expenses:
        lines += f"- {float(amount):.2f} —Ä—É–±. ({category})\n"

    text = f"{title}:\n{lines}\n–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±."
    bot.send_message(message.from_user.id, text)

@bot.message_handler(commands = ['today'])
def today(message):
    user_id = message.from_user.id

    expenses, total = insert_into_DB.today_expenses(user_id)
    send_expenses_report(
        message, expenses, total,
        "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–°–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    )

@bot.message_handler(commands = ['yesterday'])
def yesterday(message):
    user_id = message.from_user.id

    expenses, total = insert_into_DB.yesterday_expenses(user_id)
    send_expenses_report(
        message, expenses, total,
        "–í—á–µ—Ä–∞—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
        "–í—á–µ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ"
    )

@bot.message_handler(commands = ['week'])
def week(message):
    user_id = message.from_user.id

    expenses, total = insert_into_DB.week_expenses(user_id)
    send_expenses_report(
        message, expenses, total,
        "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é",
        "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ"
    )

@bot.message_handler(commands = ['month'])
def month(message):
    user_id = message.from_user.id

    expenses, total = insert_into_DB.month_expenses(user_id)
    send_expenses_report(
        message, expenses, total,
        "–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü",
        "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ"
    )


@bot.message_handler(content_types = ['photo', 'video', 'audio', 'voice', 'document', 'video_note'])
def get_file(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', url='https://github.com/sergeilubimkov/tg-bot'))
    #region TestingButton
    btn1 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª', callback_data='delete')
    markup.row(btn1) #, btn2)
    #endregion
    bot.reply_to(message, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã \n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:', reply_markup = markup)

#region TestingButton
@bot.callback_query_handler(func = lambda callback: True)
def callback_message(callback):
    if callback.data == 'delete':
        bot.delete_message(callback.message.chat.id, callback.message.message_id - 1)
        bot.edit_message_text('–§–∞–π–ª —É–¥–∞–ª—ë–Ω', callback.message.chat.id, callback.message.message_id)
    elif callback.data == 'edit':
        bot.edit_message_text('–ò–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç', callback.message.chat.id, callback.message.message_id)
#endregion

@bot.message_handler()
def info(message):
    if message.text.lower() == 'id':
        bot.reply_to(message, f'Your ID: {message.from_user.id}')
    if message.text.lower() == 'hello':
        bot.reply_to(message, f'Hello! {message.from_user.first_name} {message.from_user.last_name}')

def send_reminder():
    USER_IDS = insert_into_DB.getUsers()
    for user_id in USER_IDS:
        bot.send_message(user_id, "üëã –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã!")

scheduler = BackgroundScheduler()

scheduler.add_job(send_reminder, 'cron', hour=21, minute=0)
scheduler.start()

bot.infinity_polling()